name: Ejemplo de Workflow con PR Mergeado

on:
  workflow_dispatch:
    inputs:
      branchPr:
        description: 'PR'
        type: string
        required: true
      releaseType:
        description: 'Release type'
        required: true
        default: 'Weekly release name'
        type: choice
        options:
          - Weekly release
          - Emergency
      releaseName:
        description: 'Release name'
        type: string
        required: true
      rootCausePr:
        description: 'Root Cause PR'
        type: string
        required: true
      jiraTicket:
        description: 'Jira ticket'
        type: string
        required: true
      reason4Fix:
        description: 'Reason fix is critical'
        type: string
        required: true
jobs:

  check-pr-information:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Print Variables
        run: |
          echo "PR: $PR"
          echo "TYPE: $TYPE"
          echo "RELEASE_NAME: $RELEASE_NAME"
          echo "ROOT_CAUSE_PR: $ROOT_CAUSE_PR"
          echo "JIRA_TICKET: $JIRA_TICKET"
          echo "REASON_FIX: $REASON_FIX"
        env:
          PR: ${{ inputs.branchPr }}
          TYPE: ${{ inputs.releaseType }}
          RELEASE_NAME: ${{ inputs.releaseName }}
          ROOT_CAUSE_PR: ${{ inputs.rootCausePr }}
          JIRA_TICKET: ${{ inputs.jiraTicket }}
          REASON_FIX: ${{ inputs.reason4Fix }}
      - name: get the Pr information
        run: |
          echo ${{ inputs.branchPr }} PR ID
          pwd
          prJson="$(gh pr view ${{ inputs.branchPr }} --json author,mergeCommit,mergeable,mergedAt,number,title,url,id,labels)" 
          echo 'PR_JSON='$prJson >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Print PR info
        run: |
          echo "PR_JSON: $PR_JSON"
          echo "REASON_FIX: $REASON_FIX"
      - name: get Release information
        run: |
          releases="$(gh release list --limit 1 --json name,tagName)" 
          echo 'RELEASES='$releases >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Print Releases info
        run: |
          echo "$RELEASES" | jq '.[0]'
      - name: Obtener ID de Release
        id: obtener_id_release
        run: |
          git fetch --all
          # git branch -a
          # Obtener la lista de ramas remotas que coinciden con el patr贸n '*release*'
          branch_list=$(git branch -r --list '*release*' --format "%(refname:lstrip=3)")
          # Imprimir la lista de ramas para verificar
          echo "Lista de ramas remotas:"
          echo "$branch_list"
          # Buscar la cadena 'foo' en cada rama de la lista
          found=false
          while IFS= read -r branch; do
            if echo "$branch" | grep -q ${{ inputs.releaseName }}; then
              echo "Se encontr贸 la cadena ${{ inputs.releaseName }} en la rama: $branch"
              found=true
            fi
          done <<< "$branch_list"
          
          # Verificar si se encontr贸 la cadena 'foo' en alguna rama
          if ! $found; then
            echo "Error: No se encontr贸 ninguna rama que contenga la cadena 'foo'."
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        
